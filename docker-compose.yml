services:
  db:
    image: postgres:15
    container_name: osrs_db
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE:-osrs_market}
    volumes:
      - db_data:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"  # REMOVED: Database not accessible externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d osrs_market"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - osrs_network

  backend:
    build: ./backend
    container_name: osrs_backend
    restart: always
    environment:
      # Database configuration for Docker
      PG_USER: ${PG_USER:-postgres}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_HOST: db
      PG_PORT: ${PG_PORT:-5432}
      PG_DATABASE: ${PG_DATABASE:-osrs_market}
      # Backend configuration
      BACKEND_PORT: ${BACKEND_PORT:-3001}
      FRONTEND_PORT: ${FRONTEND_PORT:-5173}
      NODE_ENV: production
    ports:
      - "3001:3001"  # API accessible externally
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/items || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - osrs_network

  frontend:
    build:
      context: ./frontend
      args:
        API_URL: ${API_URL:-http://localhost:3001}
        BACKEND_PORT: ${BACKEND_PORT:-3001}
        FRONTEND_PORT: ${FRONTEND_PORT:-5173}
    container_name: osrs_frontend
    restart: always
    ports:
      - "5173:80"  # Nginx serves on port 80 inside container
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - osrs_network

volumes:
  db_data:

networks:
  osrs_network:
    driver: bridge
